#- start of generated part of Ops  ---------------------------------------------
#- Generated on 2024-04-28T13:24:02+02:00 by ./makeOPS.raku
#- PLEASE DON'T CHANGE ANYTHING BELOW THIS LINE
my constant @ops =
  'no_op',
  'const_i8',
  'const_i16',
  'const_i32',
  'const_i64',
  'const_n32',
  'const_n64',
  'const_s',
  'set',
  'extend_u8',
  'extend_u16',
  'extend_u32',
  'extend_i8',
  'extend_i16',
  'extend_i32',
  'trunc_u8',
  'trunc_u16',
  'trunc_u32',
  'trunc_i8',
  'trunc_i16',
  'trunc_i32',
  'extend_n32',
  'trunc_n32',
  'goto',
  'if_i',
  'unless_i',
  'if_n',
  'unless_n',
  'if_s',
  'unless_s',
  'if_s0',
  'unless_s0',
  'eq_u',
  'ne_u',
  'jumplist',
  'getlex',
  'bindlex',
  'getlex_ni',
  'getlex_nn',
  'getlex_ns',
  'getlex_no',
  'bindlex_ni',
  'bindlex_nn',
  'bindlex_ns',
  'bindlex_no',
  'getlex_ng',
  'bindlex_ng',
  'getdynlex',
  'binddynlex',
  'setlexvalue',
  'lexprimspec',
  'return_i',
  'return_n',
  'return_s',
  'return_o',
  'return',
  'eq_i',
  'ne_i',
  'lt_i',
  'le_i',
  'gt_i',
  'ge_i',
  'cmp_i',
  'add_i',
  'sub_i',
  'mul_i',
  'div_i',
  'div_u',
  'mod_i',
  'mod_u',
  'neg_i',
  'abs_i',
  'inc_i',
  'inc_u',
  'dec_i',
  'dec_u',
  'band_i',
  'bor_i',
  'bxor_i',
  'bnot_i',
  'blshift_i',
  'brshift_i',
  'pow_i',
  'not_i',
  'gcd_i',
  'lcm_i',
  'eq_n',
  'ne_n',
  'lt_n',
  'le_n',
  'gt_n',
  'ge_n',
  'cmp_n',
  'add_n',
  'sub_n',
  'mul_n',
  'div_n',
  'mod_n',
  'neg_n',
  'abs_n',
  'pow_n',
  'ceil_n',
  'floor_n',
  'sin_n',
  'asin_n',
  'cos_n',
  'acos_n',
  'tan_n',
  'atan_n',
  'atan2_n',
  'le_u',
  'lt_u',
  'sinh_n',
  'cosh_n',
  'tanh_n',
  'ge_u',
  'sqrt_n',
  'log_n',
  'exp_n',
  'coerce_in',
  'coerce_ni',
  'coerce_is',
  'coerce_ns',
  'coerce_si',
  'coerce_sn',
  'gt_u',
  'cmp_u',
  'DEPRECATED_99',
  'DEPRECATED_100',
  'DEPRECATED_101',
  'DEPRECATED_102',
  'DEPRECATED_103',
  'DEPRECATED_104',
  'DEPRECATED_105',
  'DEPRECATED_106',
  'DEPRECATED_70',
  'DEPRECATED_71',
  'DEPRECATED_72',
  'DEPRECATED_73',
  'DEPRECATED_74',
  'checkarity',
  'param_rp_i',
  'param_rp_n',
  'param_rp_s',
  'param_rp_o',
  'param_op_i',
  'param_op_n',
  'param_op_s',
  'param_op_o',
  'param_rn_i',
  'param_rn_n',
  'param_rn_s',
  'param_rn_o',
  'param_on_i',
  'param_on_n',
  'param_on_s',
  'param_on_o',
  'param_sp',
  'param_sn',
  'getcode',
  'caller',
  'capturelex',
  'takeclosure',
  'exception',
  'bindexmessage',
  'bindexpayload',
  'bindexcategory',
  'getexmessage',
  'getexpayload',
  'getexcategory',
  'throwdyn',
  'throwlex',
  'throwlexotic',
  'throwcatdyn',
  'throwcatlex',
  'throwcatlexotic',
  'die',
  'rethrow',
  'resume',
  'takehandlerresult',
  'DEPRECATED_33',
  'DEPRECATED_34',
  'backtracestrings',
  'usecapture',
  'savecapture',
  'captureposelems',
  'captureposarg',
  'captureposarg_i',
  'captureposarg_n',
  'captureposarg_s',
  'captureposprimspec',
  'captureexistsnamed',
  'capturehasnameds',
  'DEPRECATED_69',
  'DEPRECATED_60',
  'DEPRECATED_61',
  'null_s',
  'isnull_s',
  'eq_s',
  'ne_s',
  'gt_s',
  'ge_s',
  'lt_s',
  'le_s',
  'cmp_s',
  'eqat_s',
  'eqatic_s',
  'haveat_s',
  'concat_s',
  'repeat_s',
  'substr_s',
  'index_s',
  'DEPRECATED_40',
  'codes_s',
  'getcp_s',
  'indexcp_s',
  'uc',
  'lc',
  'tc',
  'split',
  'join',
  'getcpbyname',
  'indexat',
  'indexnat',
  'unipropcode',
  'unipvalcode',
  'hasuniprop',
  'hasunipropc',
  'chars',
  'chr',
  'ordfirst',
  'ordat',
  'rindexfrom',
  'escape',
  'flip',
  'setbuffersize_fh',
  'iscclass',
  'findcclass',
  'findnotcclass',
  'nfafromstatelist',
  'nfarunproto',
  'nfarunalt',
  'radix',
  'encode',
  'decode',
  'istrue_s',
  'isfalse_s',
  'null',
  'isnull',
  'ifnonnull',
  'DEPRECATED_75',
  'DEPRECATED_76',
  'DEPRECATED_77',
  'DEPRECATED_78',
  'create',
  'clone',
  'isconcrete',
  'rebless',
  'istype',
  'objprimspec',
  'gethow',
  'getwhat',
  'getwho',
  'setwho',
  'reprname',
  'getwhere',
  'eqaddr',
  'bindattr_i',
  'bindattr_n',
  'bindattr_s',
  'bindattr_o',
  'bindattrs_i',
  'bindattrs_n',
  'bindattrs_s',
  'bindattrs_o',
  'getattr_i',
  'getattr_n',
  'getattr_s',
  'getattr_o',
  'getattrs_i',
  'getattrs_n',
  'getattrs_s',
  'getattrs_o',
  'attrinited',
  'box_i',
  'box_n',
  'box_s',
  'unbox_i',
  'unbox_n',
  'unbox_s',
  'atpos_i',
  'atpos_n',
  'atpos_s',
  'atpos_o',
  'bindpos_i',
  'bindpos_n',
  'bindpos_s',
  'bindpos_o',
  'push_i',
  'push_n',
  'push_s',
  'push_o',
  'pop_i',
  'pop_n',
  'pop_s',
  'pop_o',
  'shift_i',
  'shift_n',
  'shift_s',
  'shift_o',
  'unshift_i',
  'unshift_n',
  'unshift_s',
  'unshift_o',
  'splice',
  'setelemspos',
  'existspos',
  'atkey_i',
  'atkey_n',
  'atkey_s',
  'atkey_o',
  'bindkey_i',
  'bindkey_n',
  'bindkey_s',
  'bindkey_o',
  'existskey',
  'deletekey',
  'elems',
  'knowhow',
  'knowhowattr',
  'newtype',
  'composetype',
  'DEPRECATED_83',
  'DEPRECATED_84',
  'settypecache',
  'settypecheckmode',
  'setboolspec',
  'DEPRECATED_64',
  'DEPRECATED_65',
  'bootint',
  'bootnum',
  'bootstr',
  'bootarray',
  'bootintarray',
  'bootnumarray',
  'bootstrarray',
  'boothash',
  'isint',
  'isnum',
  'isstr',
  'islist',
  'ishash',
  'sethllconfig',
  'hllboxtype_i',
  'hllboxtype_n',
  'hllboxtype_s',
  'hlllist',
  'hllhash',
  'getcomp',
  'bindcomp',
  'getcurhllsym',
  'bindcurhllsym',
  'gethllsym',
  'bindhllsym',
  'settypehll',
  'settypehllrole',
  'DEPRECATED_95',
  'DEPRECATED_96',
  'usecompileehllconfig',
  'usecompilerhllconfig',
  'iter',
  'iterkey_s',
  'iterval',
  'getcodename',
  'iscoderef',
  'getcodeobj',
  'setcodeobj',
  'setcodename',
  'forceouterctx',
  'DEPRECATED_97',
  'DEPRECATED_98',
  'freshcoderef',
  'markcodestatic',
  'markcodestub',
  'getstaticcode',
  'getcodecuid',
  'DEPRECATED_90',
  'DEPRECATED_91',
  'assign',
  'assignunchecked',
  'iscont',
  'decont',
  'setcontspec',
  'sha1',
  'createsc',
  'scsetobj',
  'scsetcode',
  'scgetobj',
  'scgethandle',
  'scgetobjidx',
  'scsetdesc',
  'scobjcount',
  'setobjsc',
  'getobjsc',
  'serialize',
  'deserialize',
  'wval',
  'wval_wide',
  'scwbdisable',
  'scwbenable',
  'pushcompsc',
  'popcompsc',
  'scgetdesc',
  'loadbytecode',
  'newmixintype',
  'installconfprog',
  'iscompunit',
  'compunitmainline',
  'compunitcodes',
  'ctx',
  'ctxouter',
  'ctxcaller',
  'ctxlexpad',
  'curcode',
  'callercode',
  'add_I',
  'sub_I',
  'mul_I',
  'div_I',
  'mod_I',
  'neg_I',
  'abs_I',
  'cmp_I',
  'eq_I',
  'ne_I',
  'lt_I',
  'le_I',
  'gt_I',
  'ge_I',
  'bor_I',
  'bxor_I',
  'band_I',
  'bnot_I',
  'blshift_I',
  'brshift_I',
  'pow_I',
  'gcd_I',
  'lcm_I',
  'expmod_I',
  'isprime_I',
  'rand_I',
  'coerce_In',
  'coerce_Is',
  'coerce_nI',
  'coerce_sI',
  'isbig_I',
  'bool_I',
  'base_I',
  'radix_I',
  'div_In',
  'copy_f',
  'append_f',
  'rename_f',
  'delete_f',
  'chmod_f',
  'exists_f',
  'mkdir',
  'rmdir',
  'open_dir',
  'read_dir',
  'close_dir',
  'open_fh',
  'close_fh',
  'dispatch_u',
  'getattrsref_u',
  'DEPRECATED_28',
  'atposnd_u',
  'seek_fh',
  'lock_fh',
  'unlock_fh',
  'sync_fh',
  'trunc_fh',
  'eof_fh',
  'getstdin',
  'getstdout',
  'getstderr',
  'connect_sk',
  'socket',
  'bind_sk',
  'coerce_su',
  'accept_sk',
  'decodetocodes',
  'encodefromcodes',
  'multidimref_u',
  'print',
  'say',
  'return_u',
  'tell_fh',
  'stat',
  'DEPRECATED_79',
  'DEPRECATED_80',
  'chdir',
  'srand',
  'rand_i',
  'rand_n',
  'DEPRECATED_46',
  'sleep',
  'newthread',
  'threadjoin',
  'DEPRECATED_47',
  'exit',
  'DEPRECATED_30',
  'cwd',
  'clargs',
  'getenvhash',
  'loadlib',
  'freelib',
  'findsym',
  'dropsym',
  'loadext',
  'backendconfig',
  'getlexouter',
  'getlexrel',
  'getlexreldyn',
  'getlexrelcaller',
  'getlexcaller',
  'bitand_s',
  'bitor_s',
  'bitxor_s',
  'isnanorinf',
  'inf',
  'neginf',
  'nan',
  'getpid',
  'DEPRECATED_29',
  'filereadable',
  'filewritable',
  'fileexecutable',
  'atpos2d_u',
  'capturenamedshash',
  'read_fhb',
  'write_fhb',
  'replace',
  'newexception',
  'permit',
  'backtrace',
  'symlink',
  'link',
  'gethostname',
  'exreturnafterunwind',
  'vmeventsubscribe',
  'continuationreset',
  'continuationcontrol',
  'continuationinvoke',
  'randscale_n',
  'uniisblock',
  'assertparamcheck',
  'hintfor',
  'paramnamesused',
  'getuniname',
  'getuniprop_int',
  'getuniprop_bool',
  'getuniprop_str',
  'matchuniprop',
  'nativecallbuild',
  'nativecallinvoke',
  'nativecallrefresh',
  'threadrun',
  'threadid',
  'threadyield',
  'currentthread',
  'lock',
  'unlock',
  'semacquire',
  'semtryacquire',
  'semrelease',
  'getlockcondvar',
  'condwait',
  'condsignalone',
  'condsignalall',
  'queuepoll',
  'DEPRECATED_82',
  'ctxouterskipthunks',
  'ctxcallerskipthunks',
  'timer',
  'cancel',
  'signal',
  'watchfile',
  'asyncconnect',
  'asynclisten',
  'bindposnd_u',
  'asyncwritebytes',
  'bindpos3d_u',
  'asyncreadbytes',
  'getlexstatic_o',
  'getlexperinvtype_o',
  'execname',
  'const_i64_16',
  'const_i64_32',
  'isnonnull',
  'param_rn2_i',
  'param_rn2_n',
  'param_rn2_s',
  'param_rn2_o',
  'param_on2_i',
  'param_on2_n',
  'param_on2_s',
  'param_on2_o',
  'osrpoint',
  'nativecallcast',
  'spawnprocasync',
  'killprocasync',
  'startprofile',
  'endprofile',
  'objectid',
  'settypefinalize',
  'force_gc',
  'nativecallglobal',
  'DEPRECATED_32',
  'setparameterizer',
  'parameterizetype',
  'typeparameterized',
  'typeparameters',
  'typeparameterat',
  'readlink',
  'lstat',
  'iscont_i',
  'iscont_n',
  'iscont_s',
  'assign_i',
  'assign_n',
  'assign_s',
  'decont_i',
  'decont_n',
  'decont_s',
  'getrusage',
  'threadlockcount',
  'bindcomplete',
  'getlexref_i',
  'getlexref_n',
  'getlexref_s',
  'getlexref_ni',
  'getlexref_nn',
  'getlexref_ns',
  'atposref_i',
  'atposref_n',
  'atposref_s',
  'getattrref_i',
  'getattrref_n',
  'getattrref_s',
  'getattrsref_i',
  'getattrsref_n',
  'getattrsref_s',
  'nativecallsizeof',
  'encodenorm',
  'normalizecodes',
  'strfromcodes',
  'strtocodes',
  'getcodelocation',
  'eqatim_s',
  'ordbaseat',
  'neverrepossess',
  'scdisclaim',
  'setthreadname',
  'atpos2d_i',
  'atpos2d_n',
  'atpos2d_s',
  'atpos2d_o',
  'atpos3d_i',
  'atpos3d_n',
  'atpos3d_s',
  'atpos3d_o',
  'atposnd_i',
  'atposnd_n',
  'atposnd_s',
  'atposnd_o',
  'bindpos2d_i',
  'bindpos2d_n',
  'bindpos2d_s',
  'bindpos2d_o',
  'bindpos3d_i',
  'bindpos3d_n',
  'bindpos3d_s',
  'bindpos3d_o',
  'bindposnd_i',
  'bindposnd_n',
  'bindposnd_s',
  'bindposnd_o',
  'dimensions',
  'setdimensions',
  'numdimensions',
  'ctxcode',
  'isrwcont',
  'fc',
  'getlexref_nu',
  'atpos3d_u',
  'encoderep',
  'istty_fh',
  'multidimref_i',
  'multidimref_n',
  'multidimref_s',
  'fileno_fh',
  'asyncudp',
  'bindpos2d_u',
  'asyncwritebytesto',
  'objprimbits',
  'objprimunsigned',
  'ctxnt',
  'chown_f',
  'bindattr_u',
  'bindattrs_u',
  'getlexref_i32',
  'getlexref_i16',
  'getlexref_i8',
  'getlexref_n32',
  'box_u',
  'unbox_u',
  'coerce_iu',
  'coerce_ui',
  'coerce_nu',
  'coerce_un',
  'decont_u',
  'bnot_u',
  'getattr_u',
  'getattrs_u',
  'getattrref_u',
  'getlexref_u',
  'getlexref_u32',
  'getlexref_u16',
  'getlexref_u8',
  'param_rp_u',
  'param_op_u',
  'param_rn_u',
  'param_on_u',
  'param_rn2_u',
  'param_on2_u',
  'stat_time',
  'lstat_time',
  'setdebugtypename',
  'loadbytecodebuffer',
  'loadbytecodefh',
  'throwpayloadlex',
  'throwpayloadlexcaller',
  'lastexpayload',
  'cancelnotify',
  'decoderconfigure',
  'decodersetlineseps',
  'decoderaddbytes',
  'decodertakechars',
  'decodertakeallchars',
  'decodertakeavailablechars',
  'decodertakeline',
  'decoderbytesavailable',
  'decodertakebytes',
  'decoderempty',
  'indexingoptimized',
  'captureinnerlex',
  'unicmp_s',
  'DEPRECATED_92',
  'strfromname',
  'indexic_s',
  'getport_sk',
  'cpucores',
  'eqaticim_s',
  'indexicim_s',
  'decodertakecharseof',
  'indexim_s',
  'cas_o',
  'cas_i',
  'atomicinc_i',
  'atomicdec_i',
  'atomicadd_i',
  'atomicload_o',
  'atomicload_i',
  'atomicstore_o',
  'atomicstore_i',
  'barrierfull',
  'coveragecontrol',
  'DEPRECATED_111',
  'DEPRECATED_112',
  'DEPRECATED_113',
  'DEPRECATED_114',
  'DEPRECATED_115',
  'DEPRECATED_107',
  'DEPRECATED_108',
  'DEPRECATED_109',
  'DEPRECATED_110',
  'coerce_II',
  'encoderepconf',
  'encodeconf',
  'decodeconf',
  'decoderepconf',
  'getppid',
  'getsignals',
  'slice',
  'DEPRECATED_38',
  'DEPRECATED_39',
  'DEPRECATED_81',
  'DEPRECATED_41',
  'DEPRECATED_42',
  'DEPRECATED_43',
  'DEPRECATED_44',
  'atomicbindattr_o',
  'casattr_o',
  'atkey_u',
  'coerce_us',
  'DEPRECATED_45',
  'hllbool',
  'hllboolfor',
  'decodelocaltime',
  'fork',
  'buffertocu',
  'writeint',
  'writeuint',
  'writenum',
  'serializetobuf',
  'readint',
  'readuint',
  'readnum',
  'DEPRECATED_68',
  'uname',
  'freemem',
  'totalmem',
  'DEPRECATED_93',
  'DEPRECATED_94',
  'time',
  'dispatch_v',
  'dispatch_i',
  'dispatch_n',
  'dispatch_s',
  'dispatch_o',
  'gettypehllrole',
  'bindpos_u',
  'atpos_u',
  'atposref_u',
  'iscont_u',
  'assign_u',
  'captureposarg_u',
  'sp_guard',
  'sp_guardconc',
  'sp_guardtype',
  'sp_guardhll',
  'sp_guardsf',
  'sp_guardsfouter',
  'sp_guardobj',
  'sp_guardnotobj',
  'sp_guardjustconc',
  'sp_guardjusttype',
  'sp_guardnonzero',
  'sp_rebless',
  'sp_decont',
  'sp_getlex_o',
  'sp_getlex_ins',
  'sp_getlex_no',
  'sp_bindlex_in',
  'sp_bindlex_os',
  'sp_getlexstatic_o',
  'sp_assertparamcheck',
  'sp_bindcomplete',
  'sp_istype',
  'sp_dispatch_v',
  'sp_dispatch_i',
  'sp_dispatch_u',
  'sp_dispatch_n',
  'sp_dispatch_s',
  'sp_dispatch_o',
  'sp_getarg_o',
  'sp_getarg_i',
  'sp_getarg_u',
  'sp_getarg_n',
  'sp_getarg_s',
  'sp_paramnamesused',
  'sp_getspeshslot',
  'sp_fastcreate',
  'sp_get_o',
  'sp_get_i64',
  'sp_get_i32',
  'sp_get_i16',
  'sp_get_i8',
  'sp_get_u64',
  'sp_get_u32',
  'sp_get_u16',
  'sp_get_u8',
  'sp_get_n',
  'sp_get_s',
  'sp_bind_o',
  'sp_bind_i64',
  'sp_bind_i32',
  'sp_bind_i16',
  'sp_bind_i8',
  'sp_bind_u64',
  'sp_bind_u32',
  'sp_bind_u16',
  'sp_bind_u8',
  'sp_bind_n',
  'sp_bind_s',
  'sp_bind_s_nowb',
  'sp_p6oget_o',
  'sp_p6ogetvt_o',
  'sp_p6ogetvc_o',
  'sp_p6oget_i',
  'sp_p6oget_u',
  'sp_p6oget_n',
  'sp_p6oget_s',
  'sp_p6oget_bi',
  'sp_p6obind_o',
  'sp_p6obind_i',
  'sp_p6obind_u',
  'sp_p6obind_n',
  'sp_p6obind_s',
  'sp_p6oget_i32',
  'sp_p6oget_u32',
  'sp_p6obind_i32',
  'sp_p6obind_u32',
  'sp_getvt_o',
  'sp_getvc_o',
  'sp_fastbox_i',
  'sp_fastbox_u',
  'sp_fastbox_bi',
  'sp_fastbox_i_ic',
  'sp_fastbox_u_ic',
  'sp_fastbox_bi_ic',
  'sp_deref_get_i64',
  'sp_deref_get_n',
  'sp_deref_bind_i64',
  'sp_deref_bind_n',
  'sp_getlexvia_o',
  'sp_getlexvia_ins',
  'sp_bindlexvia_os',
  'sp_bindlexvia_in',
  'sp_getstringfrom',
  'sp_getwvalfrom',
  'sp_jit_enter',
  'sp_istrue_n',
  'sp_boolify_iter',
  'sp_boolify_iter_arr',
  'sp_boolify_iter_hash',
  'sp_cas_o',
  'sp_atomicload_o',
  'sp_atomicstore_o',
  'sp_add_I',
  'sp_sub_I',
  'sp_mul_I',
  'sp_bool_I',
  'sp_runbytecode_v',
  'sp_runbytecode_i',
  'sp_runbytecode_u',
  'sp_runbytecode_n',
  'sp_runbytecode_s',
  'sp_runbytecode_o',
  'sp_runcfunc_v',
  'sp_runcfunc_i',
  'sp_runcfunc_u',
  'sp_runcfunc_n',
  'sp_runcfunc_s',
  'sp_runcfunc_o',
  'sp_runnativecall_v',
  'sp_runnativecall_i',
  'sp_runnativecall_u',
  'sp_runnativecall_n',
  'sp_runnativecall_s',
  'sp_runnativecall_o',
  'sp_resumption',
  'prof_enter',
  'prof_enterspesh',
  'prof_enterinline',
  'prof_enternative',
  'prof_exit',
  'prof_allocated',
  'prof_replaced',
  'ctw_check',
  'coverage_log',
  'breakpoint',
;

my constant %ops =
  'no_op', ':confprog',
  'const_i8', 'w(int8) int8 :pure',
  'const_i16', 'w(int16) int16 :pure',
  'const_i32', 'w(int32) int32 :pure',
  'const_i64', 'w(int64) int64 :pure :confprog',
  'const_n32', 'w(num32) num32 :pure',
  'const_n64', 'w(num64) num64 :pure :confprog',
  'const_s', 'w(str) str :pure :confprog',
  'set', 'w(`1) r(`1) :pure :confprog',
  'extend_u8', 'w(uint64) r(uint8) :pure',
  'extend_u16', 'w(uint64) r(uint16) :pure',
  'extend_u32', 'w(uint64) r(uint32) :pure',
  'extend_i8', 'w(int64) r(int8) :pure',
  'extend_i16', 'w(int64) r(int16) :pure',
  'extend_i32', 'w(int64) r(int32) :pure',
  'trunc_u8', 'w(uint8) r(uint64) :pure',
  'trunc_u16', 'w(uint16) r(uint64) :pure',
  'trunc_u32', 'w(uint32) r(uint64) :pure',
  'trunc_i8', 'w(int8) r(int64) :pure',
  'trunc_i16', 'w(int16) r(int64) :pure',
  'trunc_i32', 'w(int32) r(int64) :pure',
  'extend_n32', 'w(num64) r(num32) :pure',
  'trunc_n32', 'w(num32) r(num64) :pure',
  'goto', '.j ins :confprog',
  'if_i', 'r(int64) ins :confprog',
  'unless_i', 'r(int64) ins :confprog',
  'if_n', 'r(num64) ins',
  'unless_n', 'r(num64) ins',
  'if_s', 'r(str) ins',
  'unless_s', 'r(str) ins',
  'if_s0', 'r(str) ins',
  'unless_s0', 'r(str) ins',
  'eq_u', 'w(int64) r(uint64) r(uint64) :pure :confprog',
  'ne_u', 'w(int64) r(uint64) r(uint64) :pure :confprog',
  'jumplist', ':j int64 r(int64)',
  'getlex', 'w(`1) rl(`1) :pure :deoptonepoint :logged',
  'bindlex', 'wl(`1) r(`1)',
  'getlex_ni', 'w(int64) str :pure :noinline :invokish :throwish :deoptallpoint',
  'getlex_nn', 'w(num64) str :pure :noinline :invokish :throwish :deoptallpoint',
  'getlex_ns', 'w(str) str :pure :noinline :invokish :throwish :deoptallpoint',
  'getlex_no', 'w(obj) str :pure :deoptonepoint :logged :noinline :invokish :throwish :deoptallpoint',
  'bindlex_ni', 'str r(int64) :noinline',
  'bindlex_nn', 'str r(num64) :noinline',
  'bindlex_ns', 'str r(str) :noinline',
  'bindlex_no', 'str r(obj) :noinline',
  'getlex_ng', 'w(obj) r(str) :pure :noinline :useshll',
  'bindlex_ng', 'r(str) r(obj) :noinline :useshll',
  'getdynlex', 'w(obj) r(str) :pure :noinline :useshll :invokish :throwish :deoptallpoint',
  'binddynlex', 'r(str) r(obj) :noinline',
  'setlexvalue', 'r(obj) str r(obj) int16',
  'lexprimspec', 'w(int64) r(obj) r(str) :pure',
  'return_i', '.r r(int64) :useshll',
  'return_n', '.r r(num64) :useshll',
  'return_s', '.r r(str) :useshll',
  'return_o', '.r r(obj)',
  'return', '.r',
  'eq_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'ne_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'lt_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'le_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'gt_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'ge_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'cmp_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'add_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'sub_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'mul_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'div_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'div_u', 'w(uint64) r(uint64) r(uint64) :pure :confprog',
  'mod_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'mod_u', 'w(uint64) r(uint64) r(uint64) :pure :confprog',
  'neg_i', 'w(int64) r(int64) :pure :confprog',
  'abs_i', 'w(int64) r(int64) :pure :confprog',
  'inc_i', 'w(int64)',
  'inc_u', 'w(uint64)',
  'dec_i', 'w(int64)',
  'dec_u', 'w(uint64)',
  'band_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'bor_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'bxor_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'bnot_i', 'w(int64) r(int64) :pure :confprog',
  'blshift_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'brshift_i', 'w(int64) r(int64) r(int64) :pure :confprog',
  'pow_i', 'w(int64) r(int64) r(int64) :pure',
  'not_i', 'w(int64) r(int64) :pure :confprog',
  'gcd_i', 'w(int64) r(int64) r(int64) :pure',
  'lcm_i', 'w(int64) r(int64) r(int64) :pure',
  'eq_n', 'w(int64) r(num64) r(num64) :pure :confprog',
  'ne_n', 'w(int64) r(num64) r(num64) :pure :confprog',
  'lt_n', 'w(int64) r(num64) r(num64) :pure :confprog',
  'le_n', 'w(int64) r(num64) r(num64) :pure :confprog',
  'gt_n', 'w(int64) r(num64) r(num64) :pure :confprog',
  'ge_n', 'w(int64) r(num64) r(num64) :pure :confprog',
  'cmp_n', 'w(int64) r(num64) r(num64) :pure :confprog',
  'add_n', 'w(num64) r(num64) r(num64) :pure :confprog',
  'sub_n', 'w(num64) r(num64) r(num64) :pure :confprog',
  'mul_n', 'w(num64) r(num64) r(num64) :pure :confprog',
  'div_n', 'w(num64) r(num64) r(num64) :pure :confprog',
  'mod_n', 'w(num64) r(num64) r(num64) :pure :confprog',
  'neg_n', 'w(num64) r(num64) :pure :confprog',
  'abs_n', 'w(num64) r(num64) :pure :confprog',
  'pow_n', 'w(num64) r(num64) r(num64) :pure',
  'ceil_n', 'w(num64) r(num64) :pure :confprog',
  'floor_n', 'w(num64) r(num64) :pure :confprog',
  'sin_n', 'w(num64) r(num64) :pure',
  'asin_n', 'w(num64) r(num64) :pure',
  'cos_n', 'w(num64) r(num64) :pure',
  'acos_n', 'w(num64) r(num64) :pure',
  'tan_n', 'w(num64) r(num64) :pure',
  'atan_n', 'w(num64) r(num64) :pure',
  'atan2_n', 'w(num64) r(num64) r(num64) :pure',
  'le_u', 'w(int64) r(uint64) r(uint64) :pure :confprog',
  'lt_u', 'w(int64) r(uint64) r(uint64) :pure :confprog',
  'sinh_n', 'w(num64) r(num64) :pure',
  'cosh_n', 'w(num64) r(num64) :pure',
  'tanh_n', 'w(num64) r(num64) :pure',
  'ge_u', 'w(int64) r(uint64) r(uint64) :pure :confprog',
  'sqrt_n', 'w(num64) r(num64) :pure',
  'log_n', 'w(num64) r(num64) :pure :confprog',
  'exp_n', 'w(num64) r(num64) :pure',
  'coerce_in', 'w(num64) r(int64) :pure :confprog',
  'coerce_ni', 'w(int64) r(num64) :pure :confprog',
  'coerce_is', 'w(str) r(int64) :pure :confprog',
  'coerce_ns', 'w(str) r(num64) :pure :confprog',
  'coerce_si', 'w(int64) r(str) :pure :confprog',
  'coerce_sn', 'w(num64) r(str) :pure :confprog',
  'gt_u', 'w(int64) r(uint64) r(uint64) :pure :confprog',
  'cmp_u', 'w(int64) r(uint64) r(uint64) :pure :confprog',
  'DEPRECATED_99', '+a callsite :predeoptonepoint',
  'DEPRECATED_100', '*a int16 r(int64)',
  'DEPRECATED_101', '*a int16 r(num64)',
  'DEPRECATED_102', '*a int16 r(str)',
  'DEPRECATED_103', '*a int16 r(obj)',
  'DEPRECATED_104', '*a int16 int64',
  'DEPRECATED_105', '*a int16 num64',
  'DEPRECATED_106', '*a int16 str',
  'DEPRECATED_70', '-a r(obj)',
  'DEPRECATED_71', '-a w(int64) r(obj)',
  'DEPRECATED_72', '-a w(num64) r(obj)',
  'DEPRECATED_73', '-a w(str) r(obj)',
  'DEPRECATED_74', '-a w(obj) r(obj)',
  'checkarity', 'int16 int16',
  'param_rp_i', '.p w(int64) int16 :pure :noinline',
  'param_rp_n', '.p w(num64) int16 :pure :noinline',
  'param_rp_s', '.p w(str) int16 :pure :noinline',
  'param_rp_o', '.p w(obj) int16 :pure :noinline :useshll',
  'param_op_i', '.p w(int64) int16 ins :pure :noinline',
  'param_op_n', '.p w(num64) int16 ins :pure :noinline',
  'param_op_s', '.p w(str) int16 ins :pure :noinline',
  'param_op_o', '.p w(obj) int16 ins :pure :noinline :useshll',
  'param_rn_i', 'w(int64) str :noinline',
  'param_rn_n', 'w(num64) str :noinline',
  'param_rn_s', 'w(str) str :noinline',
  'param_rn_o', 'w(obj) str :noinline :useshll',
  'param_on_i', 'w(int64) str ins :noinline',
  'param_on_n', 'w(num64) str ins :noinline',
  'param_on_s', 'w(str) str ins :noinline',
  'param_on_o', 'w(obj) str ins :noinline :useshll',
  'param_sp', '.p w(obj) int16 :pure :noinline :useshll',
  'param_sn', 'w(obj) :noinline :useshll',
  'getcode', 'w(obj) coderef :pure',
  'caller', 'w(obj) r(int64) :pure :noinline',
  'capturelex', 'r(obj) :noinline',
  'takeclosure', 'w(obj) r(obj) :noinline',
  'exception', 'w(obj)',
  'bindexmessage', 'r(obj) r(str)',
  'bindexpayload', 'r(obj) r(obj)',
  'bindexcategory', 'r(obj) r(int64)',
  'getexmessage', 'w(str) r(obj) :pure',
  'getexpayload', 'w(obj) r(obj) :pure',
  'getexcategory', 'w(int64) r(obj) :pure',
  'throwdyn', 'w(obj) r(obj) :throwish',
  'throwlex', 'w(obj) r(obj) :throwish',
  'throwlexotic', 'w(obj) r(obj) :throwish',
  'throwcatdyn', 'w(obj) int64 :throwish',
  'throwcatlex', 'w(obj) int64 :throwish',
  'throwcatlexotic', 'w(obj) int64 :throwish',
  'die', 'w(obj) r(str) :throwish',
  'rethrow', 'r(obj) :throwish',
  'resume', 'r(obj) :throwish',
  'takehandlerresult', 'w(obj)',
  'DEPRECATED_33', 'w(obj) ins',
  'DEPRECATED_34', 'w(obj) r(obj)',
  'backtracestrings', 'w(obj) r(obj) :pure',
  'usecapture', 'w(obj) :noinline',
  'savecapture', 'w(obj) :noinline',
  'captureposelems', 'w(int64) r(obj) :pure',
  'captureposarg', 'w(obj) r(obj) r(int64) :pure :useshll',
  'captureposarg_i', 'w(int64) r(obj) r(int64) :pure',
  'captureposarg_n', 'w(num64) r(obj) r(int64) :pure',
  'captureposarg_s', 'w(str) r(obj) r(int64) :pure',
  'captureposprimspec', 'w(int64) r(obj) r(int64) :pure',
  'captureexistsnamed', 'w(int64) r(obj) r(str) :pure',
  'capturehasnameds', 'w(int64) r(obj) :pure :useshll',
  'DEPRECATED_69', 'w(obj) r(obj) r(obj)',
  'DEPRECATED_60', 'w(obj) r(obj) r(obj) r(obj)',
  'DEPRECATED_61', 'w(obj) r(obj) r(obj)',
  'null_s', 'w(str) :pure :confprog',
  'isnull_s', 'w(int64) r(str) :pure :confprog',
  'eq_s', 'w(int64) r(str) r(str) :pure :confprog',
  'ne_s', 'w(int64) r(str) r(str) :pure :confprog',
  'gt_s', 'w(int64) r(str) r(str) :pure :confprog',
  'ge_s', 'w(int64) r(str) r(str) :pure :confprog',
  'lt_s', 'w(int64) r(str) r(str) :pure :confprog',
  'le_s', 'w(int64) r(str) r(str) :pure :confprog',
  'cmp_s', 'w(int64) r(str) r(str) :pure :confprog',
  'eqat_s', 'w(int64) r(str) r(str) r(int64) :pure :confprog',
  'eqatic_s', 'w(int64) r(str) r(str) r(int64) :pure :confprog',
  'haveat_s', 'w(int64) r(str) r(int64) r(int64) r(str) r(int64) :pure :confprog',
  'concat_s', 'w(str) r(str) r(str) :pure :confprog',
  'repeat_s', 'w(str) r(str) r(int64) :pure :confprog',
  'substr_s', 'w(str) r(str) r(int64) r(int64) :pure :confprog',
  'index_s', 'w(int64) r(str) r(str) r(int64) :pure :confprog',
  'DEPRECATED_40', 'w(int64) r(str) :pure',
  'codes_s', 'w(int64) r(str) :pure :confprog',
  'getcp_s', 'w(int64) r(str) r(int64) :pure :confprog',
  'indexcp_s', 'w(int64) r(str) r(int64) :pure :confprog',
  'uc', 'w(str) r(str) :pure :confprog',
  'lc', 'w(str) r(str) :pure :confprog',
  'tc', 'w(str) r(str) :pure :confprog',
  'split', 'w(obj) r(str) r(str) :pure',
  'join', 'w(str) r(str) r(obj) :pure',
  'getcpbyname', 'w(int64) r(str) :pure',
  'indexat', 'r(str) r(int64) str ins',
  'indexnat', 'r(str) r(int64) str ins',
  'unipropcode', 'w(int64) r(str) :pure',
  'unipvalcode', 'w(int64) r(int64) r(str) :pure',
  'hasuniprop', 'w(int64) r(str) r(int64) r(int64) r(int64) :pure',
  'hasunipropc', 'w(int64) r(str) r(int64) int16 int16 :pure',
  'chars', 'w(int64) r(str) :pure :confprog',
  'chr', 'w(str) r(int64) :pure :confprog',
  'ordfirst', 'w(int64) r(str) :pure :confprog',
  'ordat', 'w(int64) r(str) r(int64) :pure :confprog',
  'rindexfrom', 'w(int64) r(str) r(str) r(int64) :pure :confprog',
  'escape', 'w(str) r(str) :pure',
  'flip', 'w(str) r(str) :pure',
  'setbuffersize_fh', 'r(obj) r(int64)',
  'iscclass', 'w(int64) r(int64) r(str) r(int64) :pure',
  'findcclass', 'w(int64) r(int64) r(str) r(int64) r(int64) :pure',
  'findnotcclass', 'w(int64) r(int64) r(str) r(int64) r(int64) :pure',
  'nfafromstatelist', 'w(obj) r(obj) r(obj)',
  'nfarunproto', 'w(obj) r(obj) r(str) r(int64)',
  'nfarunalt', 'r(obj) r(str) r(int64) r(obj) r(obj) r(obj)',
  'radix', 'w(obj) r(int64) r(str) r(int64) r(int64) :pure :useshll',
  'encode', 'w(obj) r(str) r(str) r(obj)',
  'decode', 'w(str) r(obj) r(str)',
  'istrue_s', 'w(int64) r(str) :pure',
  'isfalse_s', 'w(int64) r(str) :pure',
  'null', 'w(obj) :pure',
  'isnull', 'w(int64) r(obj) :pure :specializable :confprog',
  'ifnonnull', 'r(obj) ins :specializable',
  'DEPRECATED_75', 'w(obj) r(obj) str',
  'DEPRECATED_76', 'w(obj) r(obj) r(str)',
  'DEPRECATED_77', 'w(int64) r(obj) str',
  'DEPRECATED_78', 'w(int64) r(obj) r(str)',
  'create', 'w(obj) r(obj) :pure :specializable',
  'clone', 'w(obj) r(obj) :pure :specializable',
  'isconcrete', 'w(int64) r(obj) :pure :specializable :confprog',
  'rebless', 'w(obj) r(obj) r(obj) :deoptonepoint',
  'istype', 'w(int64) r(obj) r(obj) :pure :cache :deoptallpoint :predeoptonepoint :maycausedeopt :specializable :confprog',
  'objprimspec', 'w(int64) r(obj) :pure :specializable :confprog',
  'gethow', 'w(obj) r(obj) :pure',
  'getwhat', 'w(obj) r(obj) :pure',
  'getwho', 'w(obj) r(obj) :pure',
  'setwho', 'w(obj) r(obj) r(obj)',
  'reprname', 'w(str) r(obj) :pure :specializable :confprog',
  'getwhere', 'w(int64) r(obj) :pure',
  'eqaddr', 'w(int64) r(obj) r(obj) :pure :confprog',
  'bindattr_i', 'r(obj) r(obj) str r(int64) int16 :specializable',
  'bindattr_n', 'r(obj) r(obj) str r(num64) int16 :specializable',
  'bindattr_s', 'r(obj) r(obj) str r(str) int16 :specializable',
  'bindattr_o', 'r(obj) r(obj) str r(obj) int16 :specializable',
  'bindattrs_i', 'r(obj) r(obj) r(str) r(int64) :specializable',
  'bindattrs_n', 'r(obj) r(obj) r(str) r(num64) :specializable',
  'bindattrs_s', 'r(obj) r(obj) r(str) r(str) :specializable',
  'bindattrs_o', 'r(obj) r(obj) r(str) r(obj) :specializable',
  'getattr_i', 'w(int64) r(obj) r(obj) str int16 :specializable',
  'getattr_n', 'w(num64) r(obj) r(obj) str int16 :specializable',
  'getattr_s', 'w(str) r(obj) r(obj) str int16 :specializable',
  'getattr_o', 'w(obj) r(obj) r(obj) str int16 :deoptonepoint :logged :specializable :confprog',
  'getattrs_i', 'w(int64) r(obj) r(obj) r(str) :specializable',
  'getattrs_n', 'w(num64) r(obj) r(obj) r(str) :specializable',
  'getattrs_s', 'w(str) r(obj) r(obj) r(str) :specializable',
  'getattrs_o', 'w(obj) r(obj) r(obj) r(str) :deoptonepoint :logged :specializable',
  'attrinited', 'w(int64) r(obj) r(obj) r(str) :specializable',
  'box_i', 'w(obj) r(int64) r(obj) :pure :specializable',
  'box_n', 'w(obj) r(num64) r(obj) :pure :specializable',
  'box_s', 'w(obj) r(str) r(obj) :pure :specializable',
  'unbox_i', 'w(int64) r(obj) :pure :specializable :confprog',
  'unbox_n', 'w(num64) r(obj) :pure :specializable',
  'unbox_s', 'w(str) r(obj) :pure :specializable :confprog',
  'atpos_i', 'w(int64) r(obj) r(int64) :specializable :confprog',
  'atpos_n', 'w(num64) r(obj) r(int64) :specializable',
  'atpos_s', 'w(str) r(obj) r(int64) :specializable :confprog',
  'atpos_o', 'w(obj) r(obj) r(int64) :specializable',
  'bindpos_i', 'r(obj) r(int64) r(int64) :specializable',
  'bindpos_n', 'r(obj) r(int64) r(num64) :specializable',
  'bindpos_s', 'r(obj) r(int64) r(str) :specializable',
  'bindpos_o', 'r(obj) r(int64) r(obj) :specializable',
  'push_i', 'r(obj) r(int64) :specializable',
  'push_n', 'r(obj) r(num64) :specializable',
  'push_s', 'r(obj) r(str) :specializable',
  'push_o', 'r(obj) r(obj) :specializable',
  'pop_i', 'w(int64) r(obj) :specializable',
  'pop_n', 'w(num64) r(obj) :specializable',
  'pop_s', 'w(str) r(obj) :specializable',
  'pop_o', 'w(obj) r(obj) :specializable',
  'shift_i', 'w(int64) r(obj) :specializable',
  'shift_n', 'w(num64) r(obj) :specializable',
  'shift_s', 'w(str) r(obj) :specializable',
  'shift_o', 'w(obj) r(obj) :specializable',
  'unshift_i', 'r(obj) r(int64) :specializable',
  'unshift_n', 'r(obj) r(num64) :specializable',
  'unshift_s', 'r(obj) r(str) :specializable',
  'unshift_o', 'r(obj) r(obj) :specializable',
  'splice', 'r(obj) r(obj) r(int64) r(int64) :specializable',
  'setelemspos', 'r(obj) r(int64) :specializable',
  'existspos', 'w(int64) r(obj) r(int64) :pure :specializable :confprog',
  'atkey_i', 'w(int64) r(obj) r(str) :specializable',
  'atkey_n', 'w(num64) r(obj) r(str) :specializable',
  'atkey_s', 'w(str) r(obj) r(str) :specializable',
  'atkey_o', 'w(obj) r(obj) r(str) :specializable',
  'bindkey_i', 'r(obj) r(str) r(int64) :specializable',
  'bindkey_n', 'r(obj) r(str) r(num64) :specializable',
  'bindkey_s', 'r(obj) r(str) r(str) :specializable',
  'bindkey_o', 'r(obj) r(str) r(obj) :specializable',
  'existskey', 'w(int64) r(obj) r(str) :pure :specializable :confprog',
  'deletekey', 'r(obj) r(str) :specializable',
  'elems', 'w(int64) r(obj) :pure :specializable :confprog',
  'knowhow', 'w(obj) :pure',
  'knowhowattr', 'w(obj) :pure',
  'newtype', 'w(obj) r(obj) r(str)',
  'composetype', 'w(obj) r(obj) r(obj)',
  'DEPRECATED_83', 'r(obj) r(obj)',
  'DEPRECATED_84', 'r(obj) r(int64)',
  'settypecache', 'r(obj) r(obj)',
  'settypecheckmode', 'r(obj) r(int64)',
  'setboolspec', 'r(obj) r(int64) r(obj)',
  'DEPRECATED_64', 'w(int64) r(obj)',
  'DEPRECATED_65', 'w(int64) r(obj)',
  'bootint', 'w(obj) :pure',
  'bootnum', 'w(obj) :pure',
  'bootstr', 'w(obj) :pure',
  'bootarray', 'w(obj) :pure',
  'bootintarray', 'w(obj) :pure',
  'bootnumarray', 'w(obj) :pure',
  'bootstrarray', 'w(obj) :pure',
  'boothash', 'w(obj) :pure',
  'isint', 'w(int64) r(obj) :pure :specializable :confprog',
  'isnum', 'w(int64) r(obj) :pure :specializable :confprog',
  'isstr', 'w(int64) r(obj) :pure :specializable :confprog',
  'islist', 'w(int64) r(obj) :pure :specializable :confprog',
  'ishash', 'w(int64) r(obj) :pure :specializable :confprog',
  'sethllconfig', 'r(str) r(obj)',
  'hllboxtype_i', 'w(obj) :pure',
  'hllboxtype_n', 'w(obj) :pure',
  'hllboxtype_s', 'w(obj) :pure',
  'hlllist', 'w(obj) :pure',
  'hllhash', 'w(obj) :pure',
  'getcomp', 'w(obj) r(str) :pure',
  'bindcomp', 'w(obj) r(str) r(obj)',
  'getcurhllsym', 'w(obj) r(str) :pure :useshll',
  'bindcurhllsym', 'w(obj) r(str) r(obj) :useshll',
  'gethllsym', 'w(obj) r(str) r(str) :pure',
  'bindhllsym', 'r(str) r(str) r(obj)',
  'settypehll', 'r(obj) r(str)',
  'settypehllrole', 'r(obj) r(int64)',
  'DEPRECATED_95', 'w(obj) r(obj) :pure :invokish :useshll :maycausedeopt :specializable',
  'DEPRECATED_96', 'w(obj) r(obj) r(str) :pure :invokish :maycausedeopt :specializable',
  'usecompileehllconfig', ':useshll',
  'usecompilerhllconfig', ':useshll',
  'iter', 'w(obj) r(obj) :pure :useshll :specializable',
  'iterkey_s', 'w(str) r(obj) :pure :specializable',
  'iterval', 'w(obj) r(obj) :pure :specializable',
  'getcodename', 'w(str) r(obj) :pure',
  'iscoderef', 'w(int64) r(obj) :pure',
  'getcodeobj', 'w(obj) r(obj) :pure',
  'setcodeobj', 'r(obj) r(obj)',
  'setcodename', 'r(obj) r(str)',
  'forceouterctx', 'r(obj) r(obj)',
  'DEPRECATED_97', 'r(obj) r(obj) r(str) r(obj)',
  'DEPRECATED_98', 'w(int64) r(obj) :pure :specializable',
  'freshcoderef', 'w(obj) r(obj)',
  'markcodestatic', 'r(obj)',
  'markcodestub', 'r(obj)',
  'getstaticcode', 'w(obj) r(obj) :pure',
  'getcodecuid', 'w(str) r(obj) :pure',
  'DEPRECATED_90', 'r(obj)',
  'DEPRECATED_91', 'w(obj)',
  'assign', 'r(obj) r(obj) :invokish :maycausedeopt :deoptallpoint',
  'assignunchecked', 'r(obj) r(obj) :invokish :maycausedeopt :deoptallpoint',
  'iscont', 'w(int64) r(obj) :pure :specializable :confprog',
  'decont', 'w(obj) r(obj) :pure :invokish :deoptonepoint :logged :maycausedeopt :specializable :deoptallpoint',
  'setcontspec', 'r(obj) r(str) r(obj)',
  'sha1', 'w(str) r(str) :pure',
  'createsc', 'w(obj) r(str)',
  'scsetobj', 'r(obj) r(int64) r(obj)',
  'scsetcode', 'r(obj) r(int64) r(obj)',
  'scgetobj', 'w(obj) r(obj) r(int64)',
  'scgethandle', 'w(str) r(obj)',
  'scgetobjidx', 'w(int64) r(obj) r(obj)',
  'scsetdesc', 'r(obj) r(str)',
  'scobjcount', 'w(int64) r(obj)',
  'setobjsc', 'r(obj) r(obj)',
  'getobjsc', 'w(obj) r(obj)',
  'serialize', 'w(str) r(obj) r(obj)',
  'deserialize', 'r(str) r(obj) r(obj) r(obj) r(obj)',
  'wval', 'w(obj) int16 int16 :pure',
  'wval_wide', 'w(obj) int16 int64 :pure',
  'scwbdisable', 'w(int64)',
  'scwbenable', 'w(int64)',
  'pushcompsc', 'r(obj)',
  'popcompsc', 'w(obj)',
  'scgetdesc', 'w(str) r(obj)',
  'loadbytecode', 'w(str) r(str) :invokish :maycausedeopt :noinline :deoptonepoint :deoptallpoint',
  'newmixintype', 'w(obj) r(obj) r(str)',
  'installconfprog', 'r(obj) r(obj) r(obj)',
  'iscompunit', 'w(int64) r(obj) :pure',
  'compunitmainline', 'w(obj) r(obj)',
  'compunitcodes', 'w(obj) r(obj)',
  'ctx', 'w(obj) :pure :noinline',
  'ctxouter', 'w(obj) r(obj) :pure',
  'ctxcaller', 'w(obj) r(obj) :pure',
  'ctxlexpad', 'w(obj) r(obj) :pure',
  'curcode', 'w(obj) :pure',
  'callercode', 'w(obj) :pure',
  'add_I', 'w(obj) r(obj) r(obj) r(obj) :pure',
  'sub_I', 'w(obj) r(obj) r(obj) r(obj) :pure',
  'mul_I', 'w(obj) r(obj) r(obj) r(obj) :pure',
  'div_I', 'w(obj) r(obj) r(obj) r(obj) :pure',
  'mod_I', 'w(obj) r(obj) r(obj) r(obj) :pure',
  'neg_I', 'w(obj) r(obj) r(obj) :pure',
  'abs_I', 'w(obj) r(obj) r(obj) :pure',
  'cmp_I', 'w(int64) r(obj) r(obj) :pure',
  'eq_I', 'w(int64) r(obj) r(obj) :pure',
  'ne_I', 'w(int64) r(obj) r(obj) :pure',
  'lt_I', 'w(int64) r(obj) r(obj) :pure',
  'le_I', 'w(int64) r(obj) r(obj) :pure',
  'gt_I', 'w(int64) r(obj) r(obj) :pure',
  'ge_I', 'w(int64) r(obj) r(obj) :pure',
  'bor_I', 'w(obj) r(obj) r(obj) r(obj) :pure',
  'bxor_I', 'w(obj) r(obj) r(obj) r(obj) :pure',
  'band_I', 'w(obj) r(obj) r(obj) r(obj) :pure',
  'bnot_I', 'w(obj) r(obj) r(obj) :pure',
  'blshift_I', 'w(obj) r(obj) r(int64) r(obj) :pure',
  'brshift_I', 'w(obj) r(obj) r(int64) r(obj) :pure',
  'pow_I', 'w(obj) r(obj) r(obj) r(obj) r(obj) :pure',
  'gcd_I', 'w(obj) r(obj) r(obj) r(obj) :pure',
  'lcm_I', 'w(obj) r(obj) r(obj) r(obj) :pure',
  'expmod_I', 'w(obj) r(obj) r(obj) r(obj) r(obj) :pure',
  'isprime_I', 'w(int64) r(obj) :pure',
  'rand_I', 'w(obj) r(obj) r(obj)',
  'coerce_In', 'w(num64) r(obj) :pure',
  'coerce_Is', 'w(str) r(obj) :pure',
  'coerce_nI', 'w(obj) r(num64) r(obj) :pure',
  'coerce_sI', 'w(obj) r(str) r(obj) :pure',
  'isbig_I', 'w(int64) r(obj) :pure',
  'bool_I', 'w(int64) r(obj) :pure',
  'base_I', 'w(str) r(obj) r(int64) :pure',
  'radix_I', 'w(obj) r(int64) r(str) r(int64) r(int64) r(obj) :pure :useshll',
  'div_In', 'w(num64) r(obj) r(obj) :pure',
  'copy_f', 'r(str) r(str)',
  'append_f', 'r(str) r(str)',
  'rename_f', 'r(str) r(str)',
  'delete_f', 'r(str)',
  'chmod_f', 'r(str) r(int64)',
  'exists_f', 'w(int64) r(str)',
  'mkdir', 'r(str) r(int64)',
  'rmdir', 'r(str)',
  'open_dir', 'w(obj) r(str)',
  'read_dir', 'w(str) r(obj)',
  'close_dir', 'r(obj)',
  'open_fh', 'w(obj) r(str) r(str)',
  'close_fh', 'r(obj)',
  'dispatch_u', '.d w(uint64) str callsite :cache :deoptallpoint :predeoptonepoint :maycausedeopt :specializable',
  'getattrsref_u', 'w(obj) r(obj) r(obj) r(str) :pure :useshll',
  'DEPRECATED_28', 'r(str) r(str) r(str)',
  'atposnd_u', 'w(uint64) r(obj) r(obj) :pure :specializable',
  'seek_fh', 'r(obj) r(int64) r(int64)',
  'lock_fh', 'w(int64) r(obj) r(int64)',
  'unlock_fh', 'r(obj)',
  'sync_fh', 'r(obj)',
  'trunc_fh', 'r(obj) r(int64)',
  'eof_fh', 'w(int64) r(obj)',
  'getstdin', 'w(obj) :pure',
  'getstdout', 'w(obj) :pure',
  'getstderr', 'w(obj) :pure',
  'connect_sk', 'r(obj) r(str) r(int64) r(uint16)',
  'socket', 'w(obj) r(int64)',
  'bind_sk', 'r(obj) r(str) r(int64) r(uint16) r(int64)',
  'coerce_su', 'w(uint64) r(str) :pure :confprog',
  'accept_sk', 'w(obj) r(obj)',
  'decodetocodes', 'r(obj) r(str) r(int64) r(obj)',
  'encodefromcodes', 'r(obj) r(str) r(obj)',
  'multidimref_u', 'w(obj) r(obj) r(obj) :pure :useshll',
  'print', 'r(str)',
  'say', 'r(str) :confprog',
  'return_u', '.r r(uint64) :useshll',
  'tell_fh', 'w(int64) r(obj)',
  'stat', 'w(int64) r(str) r(int64)',
  'DEPRECATED_79', 'w(obj) r(obj) str',
  'DEPRECATED_80', 'w(obj) r(obj) r(str)',
  'chdir', 'r(str)',
  'srand', 'r(int64)',
  'rand_i', 'w(int64) :confprog',
  'rand_n', 'w(num64) :confprog',
  'DEPRECATED_46', 'w(int64)',
  'sleep', 'r(num64)',
  'newthread', 'w(obj) r(obj) r(int64)',
  'threadjoin', 'r(obj)',
  'DEPRECATED_47', 'w(num64)',
  'exit', 'r(int64) :confprog',
  'DEPRECATED_30', 'w(int64) r(str) r(str) r(obj) r(obj) r(obj) r(obj) r(int64)',
  'cwd', 'w(str) :pure :confprog',
  'clargs', 'w(obj) :pure :useshll :confprog',
  'getenvhash', 'w(obj) :pure :useshll :confprog',
  'loadlib', 'r(str) r(str)',
  'freelib', 'r(str)',
  'findsym', 'w(obj) r(str) r(str)',
  'dropsym', 'r(obj)',
  'loadext', 'r(str) r(str)',
  'backendconfig', 'w(obj) :pure :confprog',
  'getlexouter', 'w(obj) r(str) :pure :noinline :useshll :invokish :throwish :deoptallpoint',
  'getlexrel', 'w(obj) r(obj) r(str) :pure :useshll',
  'getlexreldyn', 'w(obj) r(obj) r(str) :pure :useshll :invokish :throwish :deoptallpoint',
  'getlexrelcaller', 'w(obj) r(obj) r(str) :pure :useshll',
  'getlexcaller', 'w(obj) r(str) :pure :noinline :useshll',
  'bitand_s', 'w(str) r(str) r(str) :pure',
  'bitor_s', 'w(str) r(str) r(str) :pure',
  'bitxor_s', 'w(str) r(str) r(str) :pure',
  'isnanorinf', 'w(int64) r(num64) :pure',
  'inf', 'w(num64) :pure',
  'neginf', 'w(num64) :pure',
  'nan', 'w(num64) :pure',
  'getpid', 'w(int64) :pure :confprog',
  'DEPRECATED_29', 'w(int64) r(obj) r(str) r(obj) r(obj) r(obj) r(obj) r(int64)',
  'filereadable', 'w(int64) r(str)',
  'filewritable', 'w(int64) r(str)',
  'fileexecutable', 'w(int64) r(str)',
  'atpos2d_u', 'w(uint64) r(obj) r(int64) r(int64) :pure :specializable',
  'capturenamedshash', 'w(obj) r(obj) :pure :useshll',
  'read_fhb', 'r(obj) r(obj) r(int64)',
  'write_fhb', 'r(obj) r(obj)',
  'replace', 'w(str) r(str) r(int64) r(int64) r(str)',
  'newexception', 'w(obj)',
  'permit', 'r(obj) r(int64) r(int64)',
  'backtrace', 'w(obj) r(obj)',
  'symlink', 'r(str) r(str)',
  'link', 'r(str) r(str)',
  'gethostname', 'w(str)',
  'exreturnafterunwind', 'r(obj)',
  'vmeventsubscribe', 'r(obj) r(obj)',
  'continuationreset', 'w(obj) r(obj) r(obj) :invokish :maycausedeopt :deoptallpoint',
  'continuationcontrol', 'w(obj) r(int64) r(obj) r(obj) :invokish :maycausedeopt',
  'continuationinvoke', 'w(obj) r(obj) r(obj) :invokish :maycausedeopt :deoptallpoint',
  'randscale_n', 'w(num64) r(num64)',
  'uniisblock', 'w(int64) r(str) r(int64) r(str) :pure',
  'assertparamcheck', 'r(int64) :noinline :invokish :maycausedeopt :cache :deoptallpoint',
  'hintfor', 'w(int64) r(obj) r(str)',
  'paramnamesused', ':noinline',
  'getuniname', 'w(str) r(int64) :pure',
  'getuniprop_int', 'w(int64) r(int64) r(int64) :pure',
  'getuniprop_bool', 'w(int64) r(int64) r(int64) :pure',
  'getuniprop_str', 'w(str) r(int64) r(int64) :pure',
  'matchuniprop', 'w(int64) r(int64) r(int64) r(int64) :pure',
  'nativecallbuild', 'w(int64) r(obj) r(str) r(str) r(str) r(obj) r(obj)',
  'nativecallinvoke', 'w(obj) r(obj) r(obj) r(obj) :deoptallpoint :maycausedeopt',
  'nativecallrefresh', 'r(obj)',
  'threadrun', 'r(obj)',
  'threadid', 'w(int64) r(obj) :pure',
  'threadyield', '',
  'currentthread', 'w(obj) :pure',
  'lock', 'r(obj)',
  'unlock', 'r(obj)',
  'semacquire', 'r(obj)',
  'semtryacquire', 'w(int64) r(obj)',
  'semrelease', 'r(obj)',
  'getlockcondvar', 'w(obj) r(obj) r(obj)',
  'condwait', 'r(obj)',
  'condsignalone', 'r(obj)',
  'condsignalall', 'r(obj)',
  'queuepoll', 'w(obj) r(obj)',
  'DEPRECATED_82', 'r(obj) r(obj) r(str) r(str)',
  'ctxouterskipthunks', 'w(obj) r(obj) :noinline',
  'ctxcallerskipthunks', 'w(obj) r(obj) :noinline',
  'timer', 'w(obj) r(obj) r(obj) r(int64) r(int64) r(obj)',
  'cancel', 'r(obj)',
  'signal', 'w(obj) r(obj) r(obj) r(obj) r(obj) r(int64) r(obj)',
  'watchfile', 'w(obj) r(obj) r(obj) r(str) r(obj)',
  'asyncconnect', 'w(obj) r(obj) r(obj) r(str) r(int64) r(obj)',
  'asynclisten', 'w(obj) r(obj) r(obj) r(str) r(int64) r(int64) r(obj)',
  'bindposnd_u', 'r(obj) r(obj) r(uint64) :specializable',
  'asyncwritebytes', 'w(obj) r(obj) r(obj) r(obj) r(obj) r(obj)',
  'bindpos3d_u', 'r(obj) r(int64) r(int64) r(int64) r(uint64) :specializable',
  'asyncreadbytes', 'w(obj) r(obj) r(obj) r(obj) r(obj) r(obj)',
  'getlexstatic_o', 'w(obj) r(str) :pure :noinline :specializable :cache',
  'getlexperinvtype_o', 'w(obj) r(str) :pure :logged :specializable :invokish :throwish :deoptallpoint',
  'execname', 'w(str)',
  'const_i64_16', 'w(int64) int16 :pure :confprog',
  'const_i64_32', 'w(int64) int32 :pure :confprog',
  'isnonnull', 'w(int64) r(obj) :pure :specializable',
  'param_rn2_i', 'w(int64) str str :noinline',
  'param_rn2_n', 'w(num64) str str :noinline',
  'param_rn2_s', 'w(str) str str :noinline',
  'param_rn2_o', 'w(obj) str str :noinline :useshll',
  'param_on2_i', 'w(int64) str str ins :noinline',
  'param_on2_n', 'w(num64) str str ins :noinline',
  'param_on2_s', 'w(str) str str ins :noinline',
  'param_on2_o', 'w(obj) str str ins :noinline :useshll',
  'osrpoint', ':osrpoint',
  'nativecallcast', 'w(obj) r(obj) r(obj) r(obj)',
  'spawnprocasync', 'w(obj) r(obj) r(str) r(obj) r(str) r(obj) r(obj)',
  'killprocasync', 'r(obj) r(int64)',
  'startprofile', 'r(obj)',
  'endprofile', 'w(obj)',
  'objectid', 'w(int64) r(obj) :pure',
  'settypefinalize', 'r(obj) r(int64)',
  'force_gc', '',
  'nativecallglobal', 'w(obj) r(str) r(str) r(obj) r(obj)',
  'DEPRECATED_32', 'w(int64) r(obj)',
  'setparameterizer', 'r(obj) r(obj)',
  'parameterizetype', 'w(obj) r(obj) r(obj) :invokish :maycausedeopt :deoptallpoint',
  'typeparameterized', 'w(obj) r(obj)',
  'typeparameters', 'w(obj) r(obj)',
  'typeparameterat', 'w(obj) r(obj) r(int64)',
  'readlink', 'w(str) r(str)',
  'lstat', 'w(int64) r(str) r(int64)',
  'iscont_i', 'w(int64) r(obj) :pure :specializable :confprog',
  'iscont_n', 'w(int64) r(obj) :pure :specializable :confprog',
  'iscont_s', 'w(int64) r(obj) :pure :specializable :confprog',
  'assign_i', 'r(obj) r(int64) :invokish :maycausedeopt :specializable :deoptallpoint',
  'assign_n', 'r(obj) r(num64) :invokish :maycausedeopt :specializable :deoptallpoint',
  'assign_s', 'r(obj) r(str) :invokish :maycausedeopt :specializable :deoptallpoint',
  'decont_i', 'w(int64) r(obj) :pure :invokish :maycausedeopt :specializable :deoptallpoint',
  'decont_n', 'w(num64) r(obj) :pure :invokish :maycausedeopt :specializable :deoptallpoint',
  'decont_s', 'w(str) r(obj) :pure :invokish :maycausedeopt :specializable :deoptallpoint',
  'getrusage', 'r(obj) :pure',
  'threadlockcount', 'w(int64) r(obj) :pure',
  'bindcomplete', ':noinline :invokish :maycausedeopt :cache :deoptallpoint',
  'getlexref_i', 'w(obj) rl(int64) :pure :noinline :useshll',
  'getlexref_n', 'w(obj) rl(num64) :pure :noinline :useshll',
  'getlexref_s', 'w(obj) rl(str) :pure :noinline :useshll',
  'getlexref_ni', 'w(obj) str :pure :noinline :useshll',
  'getlexref_nn', 'w(obj) str :pure :noinline :useshll',
  'getlexref_ns', 'w(obj) str :pure :noinline :useshll',
  'atposref_i', 'w(obj) r(obj) r(int64) :pure :useshll',
  'atposref_n', 'w(obj) r(obj) r(int64) :pure :useshll',
  'atposref_s', 'w(obj) r(obj) r(int64) :pure :useshll',
  'getattrref_i', 'w(obj) r(obj) r(obj) str int16 :pure :useshll',
  'getattrref_n', 'w(obj) r(obj) r(obj) str int16 :pure :useshll',
  'getattrref_s', 'w(obj) r(obj) r(obj) str int16 :pure :useshll',
  'getattrsref_i', 'w(obj) r(obj) r(obj) r(str) :pure :useshll',
  'getattrsref_n', 'w(obj) r(obj) r(obj) r(str) :pure :useshll',
  'getattrsref_s', 'w(obj) r(obj) r(obj) r(str) :pure :useshll',
  'nativecallsizeof', 'w(int64) r(obj)',
  'encodenorm', 'r(str) r(str) r(int64) r(obj)',
  'normalizecodes', 'r(obj) r(int64) r(obj)',
  'strfromcodes', 'w(str) r(obj)',
  'strtocodes', 'r(str) r(int64) r(obj)',
  'getcodelocation', 'w(obj) r(obj) :pure :confprog',
  'eqatim_s', 'w(int64) r(str) r(str) r(int64) :pure',
  'ordbaseat', 'w(int64) r(str) r(int64) :pure',
  'neverrepossess', 'r(obj)',
  'scdisclaim', 'r(obj)',
  'setthreadname', 'r(str)',
  'atpos2d_i', 'w(int64) r(obj) r(int64) r(int64) :pure :specializable',
  'atpos2d_n', 'w(num64) r(obj) r(int64) r(int64) :pure :specializable',
  'atpos2d_s', 'w(str) r(obj) r(int64) r(int64) :pure :specializable',
  'atpos2d_o', 'w(obj) r(obj) r(int64) r(int64) :pure :specializable',
  'atpos3d_i', 'w(int64) r(obj) r(int64) r(int64) r(int64) :pure :specializable',
  'atpos3d_n', 'w(num64) r(obj) r(int64) r(int64) r(int64) :pure :specializable',
  'atpos3d_s', 'w(str) r(obj) r(int64) r(int64) r(int64) :pure :specializable',
  'atpos3d_o', 'w(obj) r(obj) r(int64) r(int64) r(int64) :pure :specializable',
  'atposnd_i', 'w(int64) r(obj) r(obj) :pure :specializable',
  'atposnd_n', 'w(num64) r(obj) r(obj) :pure :specializable',
  'atposnd_s', 'w(str) r(obj) r(obj) :pure :specializable',
  'atposnd_o', 'w(obj) r(obj) r(obj) :pure :specializable',
  'bindpos2d_i', 'r(obj) r(int64) r(int64) r(int64) :specializable',
  'bindpos2d_n', 'r(obj) r(int64) r(int64) r(num64) :specializable',
  'bindpos2d_s', 'r(obj) r(int64) r(int64) r(str) :specializable',
  'bindpos2d_o', 'r(obj) r(int64) r(int64) r(obj) :specializable',
  'bindpos3d_i', 'r(obj) r(int64) r(int64) r(int64) r(int64) :specializable',
  'bindpos3d_n', 'r(obj) r(int64) r(int64) r(int64) r(num64) :specializable',
  'bindpos3d_s', 'r(obj) r(int64) r(int64) r(int64) r(str) :specializable',
  'bindpos3d_o', 'r(obj) r(int64) r(int64) r(int64) r(obj) :specializable',
  'bindposnd_i', 'r(obj) r(obj) r(int64) :specializable',
  'bindposnd_n', 'r(obj) r(obj) r(num64) :specializable',
  'bindposnd_s', 'r(obj) r(obj) r(str) :specializable',
  'bindposnd_o', 'r(obj) r(obj) r(obj) :specializable',
  'dimensions', 'w(obj) r(obj) :specializable',
  'setdimensions', 'r(obj) r(obj) :specializable',
  'numdimensions', 'w(int64) r(obj) :pure :specializable',
  'ctxcode', 'w(obj) r(obj)',
  'isrwcont', 'w(int64) r(obj) :pure :specializable',
  'fc', 'w(str) r(str) :pure',
  'getlexref_nu', 'w(obj) str :pure :noinline :useshll',
  'atpos3d_u', 'w(uint64) r(obj) r(int64) r(int64) r(int64) :pure :specializable',
  'encoderep', 'w(obj) r(str) r(str) r(str) r(obj)',
  'istty_fh', 'w(int64) r(obj) :pure',
  'multidimref_i', 'w(obj) r(obj) r(obj) :pure :useshll',
  'multidimref_n', 'w(obj) r(obj) r(obj) :pure :useshll',
  'multidimref_s', 'w(obj) r(obj) r(obj) :pure :useshll',
  'fileno_fh', 'w(int64) r(obj) :pure',
  'asyncudp', 'w(obj) r(obj) r(obj) r(str) r(int64) r(int64) r(obj)',
  'bindpos2d_u', 'r(obj) r(int64) r(int64) r(uint64) :specializable',
  'asyncwritebytesto', 'w(obj) r(obj) r(obj) r(obj) r(obj) r(obj) r(str) r(int64)',
  'objprimbits', 'w(int64) r(obj) :specializable',
  'objprimunsigned', 'w(int64) r(obj) :specializable',
  'ctxnt', 'w(obj) :pure :noinline',
  'chown_f', 'r(str) r(uint64) r(uint64)',
  'bindattr_u', 'r(obj) r(obj) str r(uint64) int16 :specializable',
  'bindattrs_u', 'r(obj) r(obj) r(str) r(uint64) :specializable',
  'getlexref_i32', 'w(obj) rl(int32) :pure :noinline :useshll',
  'getlexref_i16', 'w(obj) rl(int16) :pure :noinline :useshll',
  'getlexref_i8', 'w(obj) rl(int8) :pure :noinline :useshll',
  'getlexref_n32', 'w(obj) rl(num32) :pure :noinline :useshll',
  'box_u', 'w(obj) r(uint64) r(obj) :pure :specializable',
  'unbox_u', 'w(uint64) r(obj) :pure :specializable',
  'coerce_iu', 'w(uint64) r(int64) :pure',
  'coerce_ui', 'w(int64) r(uint64) :pure',
  'coerce_nu', 'w(uint64) r(num64) :pure',
  'coerce_un', 'w(num64) r(uint64) :pure',
  'decont_u', 'w(uint64) r(obj) :pure :invokish :maycausedeopt :specializable :deoptallpoint',
  'bnot_u', 'w(uint64) r(uint64) :pure :confprog',
  'getattr_u', 'w(uint64) r(obj) r(obj) str int16 :specializable',
  'getattrs_u', 'w(uint64) r(obj) r(obj) r(str) :specializable',
  'getattrref_u', 'w(obj) r(obj) r(obj) str int16 :pure :useshll',
  'getlexref_u', 'w(obj) rl(uint64) :pure :noinline :useshll',
  'getlexref_u32', 'w(obj) rl(uint32) :pure :noinline :useshll',
  'getlexref_u16', 'w(obj) rl(uint16) :pure :noinline :useshll',
  'getlexref_u8', 'w(obj) rl(uint8) :pure :noinline :useshll',
  'param_rp_u', 'w(uint64) int16 :pure :noinline',
  'param_op_u', 'w(uint64) int16 ins :pure :noinline',
  'param_rn_u', 'w(uint64) str :noinline',
  'param_on_u', 'w(uint64) str ins :noinline',
  'param_rn2_u', 'w(uint64) str str :noinline',
  'param_on2_u', 'w(uint64) str str ins :noinline',
  'stat_time', 'w(num64) r(str) r(int64)',
  'lstat_time', 'w(num64) r(str) r(int64)',
  'setdebugtypename', 'r(obj) r(str)',
  'loadbytecodebuffer', 'r(obj) :invokish :maycausedeopt :noinline :deoptonepoint :deoptallpoint',
  'loadbytecodefh', 'r(obj) r(str) :invokish :maycausedeopt :noinline :deoptonepoint :deoptallpoint',
  'throwpayloadlex', 'w(obj) int64 r(obj) :throwish',
  'throwpayloadlexcaller', 'w(obj) int64 r(obj) :throwish',
  'lastexpayload', 'w(obj)',
  'cancelnotify', 'r(obj) r(obj) r(obj)',
  'decoderconfigure', 'r(obj) r(str) r(obj)',
  'decodersetlineseps', 'r(obj) r(obj)',
  'decoderaddbytes', 'r(obj) r(obj)',
  'decodertakechars', 'w(str) r(obj) r(int64)',
  'decodertakeallchars', 'w(str) r(obj)',
  'decodertakeavailablechars', 'w(str) r(obj)',
  'decodertakeline', 'w(str) r(obj) r(int64) r(int64)',
  'decoderbytesavailable', 'w(int64) r(obj) :pure',
  'decodertakebytes', 'w(obj) r(obj) r(obj) r(int64)',
  'decoderempty', 'w(int64) r(obj) :pure',
  'indexingoptimized', 'w(str) r(str) :pure',
  'captureinnerlex', 'r(obj) :noinline',
  'unicmp_s', 'w(int64) r(str) r(str) r(int64) r(int64) r(int64) :pure',
  'DEPRECATED_92', 'r(obj) r(obj)',
  'strfromname', 'w(str) r(str) :pure',
  'indexic_s', 'w(int64) r(str) r(str) r(int64) :pure',
  'getport_sk', 'w(int64) r(obj)',
  'cpucores', 'w(int64) :pure',
  'eqaticim_s', 'w(int64) r(str) r(str) r(int64) :pure',
  'indexicim_s', 'w(int64) r(str) r(str) r(int64) :pure',
  'decodertakecharseof', 'w(str) r(obj) r(int64)',
  'indexim_s', 'w(int64) r(str) r(str) r(int64) :pure',
  'cas_o', 'w(obj) r(obj) r(obj) r(obj) :invokish :maycausedeopt :specializable :deoptallpoint',
  'cas_i', 'w(int64) r(obj) r(int64) r(int64) :specializable',
  'atomicinc_i', 'w(int64) r(obj) :specializable',
  'atomicdec_i', 'w(int64) r(obj) :specializable',
  'atomicadd_i', 'w(int64) r(obj) r(int64) :specializable',
  'atomicload_o', 'w(obj) r(obj) :specializable',
  'atomicload_i', 'w(int64) r(obj) :specializable',
  'atomicstore_o', 'r(obj) r(obj) :invokish :maycausedeopt :specializable :deoptallpoint',
  'atomicstore_i', 'r(obj) r(int64) :specializable',
  'barrierfull', '',
  'coveragecontrol', 'r(int64)',
  'DEPRECATED_111', '-a r(obj) r(obj) :specializable :deoptallpoint :maycausedeopt',
  'DEPRECATED_112', '-a w(int64) r(obj) r(obj) :specializable :deoptallpoint :maycausedeopt',
  'DEPRECATED_113', '-a w(num64) r(obj) r(obj) :specializable :deoptallpoint :maycausedeopt',
  'DEPRECATED_114', '-a w(str) r(obj) r(obj) :specializable :deoptallpoint :maycausedeopt',
  'DEPRECATED_115', '-a w(obj) r(obj) r(obj) :specializable :deoptallpoint :maycausedeopt',
  'DEPRECATED_107', 'w(int64) r(int16)',
  'DEPRECATED_108', 'w(num64) r(int16)',
  'DEPRECATED_109', 'w(str) r(int16)',
  'DEPRECATED_110', 'w(obj) r(int16)',
  'coerce_II', 'w(obj) r(obj) r(obj) :pure',
  'encoderepconf', 'w(obj) r(str) r(str) r(str) r(obj) r(int64)',
  'encodeconf', 'w(obj) r(str) r(str) r(obj) r(int64)',
  'decodeconf', 'w(str) r(obj) r(str) r(int64)',
  'decoderepconf', 'w(str) r(obj) r(str) r(str) r(int64)',
  'getppid', 'w(int64)',
  'getsignals', 'w(obj) :useshll',
  'slice', 'w(obj) r(obj) r(int64) r(int64)',
  'DEPRECATED_38', 'r(str) r(str) r(obj)',
  'DEPRECATED_39', '-a w(obj) str',
  'DEPRECATED_81', 'r(obj) r(obj)',
  'DEPRECATED_41', 'r(obj)',
  'DEPRECATED_42', 'r(obj)',
  'DEPRECATED_43', 'r(obj)',
  'DEPRECATED_44', 'w(obj) r(obj) r(obj) str',
  'atomicbindattr_o', 'r(obj) r(obj) r(str) r(obj) :specializable',
  'casattr_o', 'w(obj) r(obj) r(obj) r(str) r(obj) r(obj) :specializable',
  'atkey_u', 'w(uint64) r(obj) r(str) :specializable',
  'coerce_us', 'w(str) r(uint64) :pure',
  'DEPRECATED_45', 'r(obj) r(obj)',
  'hllbool', 'w(obj) r(int64) :pure :useshll',
  'hllboolfor', 'w(obj) r(int64) r(str) :pure :useshll',
  'decodelocaltime', 'w(obj) r(int64)',
  'fork', 'w(int64)',
  'buffertocu', 'w(obj) r(obj) :invokish :maycausedeopt :deoptallpoint',
  'writeint', 'r(obj) r(int64) r(int64) r(uint64)',
  'writeuint', 'r(obj) r(int64) r(uint64) r(uint64)',
  'writenum', 'r(obj) r(uint64) r(num64) r(uint64)',
  'serializetobuf', 'w(obj) r(obj) r(obj) r(obj)',
  'readint', 'w(int64) r(obj) r(uint64) r(uint64)',
  'readuint', 'w(uint64) r(obj) r(uint64) r(uint64)',
  'readnum', 'w(num64) r(obj) r(uint64) r(uint64)',
  'DEPRECATED_68', 'w(int64) r(obj)',
  'uname', 'w(obj) :pure',
  'freemem', 'w(int64) :pure',
  'totalmem', 'w(int64) :pure',
  'DEPRECATED_93', 'r(obj) r(obj)',
  'DEPRECATED_94', 'w(obj) :noinline',
  'time', 'w(uint64) :pure :confprog',
  'dispatch_v', '.d str callsite :cache :deoptallpoint :predeoptonepoint :maycausedeopt :specializable',
  'dispatch_i', '.d w(int64) str callsite :cache :deoptallpoint :predeoptonepoint :maycausedeopt :specializable',
  'dispatch_n', '.d w(num64) str callsite :cache :deoptallpoint :predeoptonepoint :maycausedeopt :specializable',
  'dispatch_s', '.d w(str) str callsite :cache :deoptallpoint :predeoptonepoint :maycausedeopt :specializable',
  'dispatch_o', '.d w(obj) str callsite :cache :deoptallpoint :predeoptonepoint :maycausedeopt :specializable :postlogged :deoptonepoint',
  'gettypehllrole', 'w(int64) r(obj) :pure',
  'bindpos_u', 'r(obj) r(int64) r(uint64) :specializable',
  'atpos_u', 'w(uint64) r(obj) r(int64) :specializable :confprog',
  'atposref_u', 'w(obj) r(obj) r(int64) :pure :useshll',
  'iscont_u', 'w(int64) r(obj) :pure :specializable :confprog',
  'assign_u', 'r(obj) r(uint64) :invokish :maycausedeopt :specializable :deoptallpoint',
  'captureposarg_u', 'w(uint64) r(obj) r(int64) :pure',
  'sp_guard', '.s w(obj) r(obj) sslot uint32 :maycausedeopt',
  'sp_guardconc', '.s w(obj) r(obj) sslot uint32 :maycausedeopt',
  'sp_guardtype', '.s w(obj) r(obj) sslot uint32 :maycausedeopt',
  'sp_guardhll', '.s w(obj) r(obj) uint64 uint32 :maycausedeopt',
  'sp_guardsf', '.s r(obj) sslot uint32 :maycausedeopt',
  'sp_guardsfouter', '.s r(obj) sslot uint32 :maycausedeopt',
  'sp_guardobj', '.s w(obj) r(obj) sslot uint32 :maycausedeopt',
  'sp_guardnotobj', '.s w(obj) r(obj) sslot uint32 :maycausedeopt',
  'sp_guardjustconc', '.s w(obj) r(obj) uint32 :maycausedeopt',
  'sp_guardjusttype', '.s w(obj) r(obj) uint32 :maycausedeopt',
  'sp_guardnonzero', '.s w(int64) r(int64) uint32 :maycausedeopt',
  'sp_rebless', '.s w(obj) r(obj) r(obj) uint32 :noinline :maycausedeopt',
  'sp_decont', '.s w(obj) r(obj) :pure :invokish :maycausedeopt',
  'sp_getlex_o', '.s w(obj) rl(obj) :pure',
  'sp_getlex_ins', '.s w(`1) rl(`1) :pure',
  'sp_getlex_no', '.s w(obj) str :pure :noinline :invokish :throwish',
  'sp_bindlex_in', '.s wl(`1) r(`1)',
  'sp_bindlex_os', '.s wl(`1) r(`1)',
  'sp_getlexstatic_o', '.s w(obj) r(str) sslot uint32 :pure',
  'sp_assertparamcheck', '.s r(int64) sslot uint32 :noinline :invokish :maycausedeopt',
  'sp_bindcomplete', '.s sslot uint32 :invokish :maycausedeopt',
  'sp_istype', '.s w(int64) r(obj) r(obj) sslot uint32 :pure :invokish :maycausedeopt',
  'sp_dispatch_v', '.s str callsite sslot uint32 :maycausedeopt :invokish',
  'sp_dispatch_i', '.s w(int64) str callsite sslot uint32 :maycausedeopt :invokish',
  'sp_dispatch_u', '.s w(uint64) str callsite sslot uint32 :maycausedeopt :invokish',
  'sp_dispatch_n', '.s w(num64) str callsite sslot uint32 :maycausedeopt :invokish',
  'sp_dispatch_s', '.s w(str) str callsite sslot uint32 :maycausedeopt :invokish',
  'sp_dispatch_o', '.s w(obj) str callsite sslot uint32 :maycausedeopt :invokish',
  'sp_getarg_o', '.s w(obj) int16 :pure',
  'sp_getarg_i', '.s w(int64) int16 :pure',
  'sp_getarg_u', '.s w(uint64) int16 :pure',
  'sp_getarg_n', '.s w(num64) int16 :pure',
  'sp_getarg_s', '.s w(str) int16 :pure',
  'sp_paramnamesused', '.s sslot',
  'sp_getspeshslot', '.s w(obj) sslot :pure',
  'sp_fastcreate', '.s w(obj) int16 sslot :pure',
  'sp_get_o', '.s w(obj) r(obj) int16 :pure',
  'sp_get_i64', '.s w(int64) r(obj) int16 :pure',
  'sp_get_i32', '.s w(int64) r(obj) int16 :pure',
  'sp_get_i16', '.s w(int64) r(obj) int16 :pure',
  'sp_get_i8', '.s w(int64) r(obj) int16 :pure',
  'sp_get_u64', '.s w(uint64) r(obj) int16 :pure',
  'sp_get_u32', '.s w(uint64) r(obj) int16 :pure',
  'sp_get_u16', '.s w(uint64) r(obj) int16 :pure',
  'sp_get_u8', '.s w(uint64) r(obj) int16 :pure',
  'sp_get_n', '.s w(num64) r(obj) int16 :pure',
  'sp_get_s', '.s w(str) r(obj) int16 :pure',
  'sp_bind_o', '.s r(obj) int16 r(obj)',
  'sp_bind_i64', '.s r(obj) int16 r(int64)',
  'sp_bind_i32', '.s r(obj) int16 r(int64)',
  'sp_bind_i16', '.s r(obj) int16 r(int64)',
  'sp_bind_i8', '.s r(obj) int16 r(int64)',
  'sp_bind_u64', '.s r(obj) int16 r(uint64)',
  'sp_bind_u32', '.s r(obj) int16 r(uint64)',
  'sp_bind_u16', '.s r(obj) int16 r(uint64)',
  'sp_bind_u8', '.s r(obj) int16 r(uint64)',
  'sp_bind_n', '.s r(obj) int16 r(num64)',
  'sp_bind_s', '.s r(obj) int16 r(str)',
  'sp_bind_s_nowb', '.s r(obj) int16 r(str)',
  'sp_p6oget_o', '.s w(obj) r(obj) int16 :pure',
  'sp_p6ogetvt_o', '.s w(obj) r(obj) int16 sslot',
  'sp_p6ogetvc_o', '.s w(obj) r(obj) int16 sslot',
  'sp_p6oget_i', '.s w(int64) r(obj) int16 :pure',
  'sp_p6oget_u', '.s w(uint64) r(obj) int16 :pure',
  'sp_p6oget_n', '.s w(num64) r(obj) int16 :pure',
  'sp_p6oget_s', '.s w(str) r(obj) int16 :pure',
  'sp_p6oget_bi', '.s w(int64) r(obj) int16 :pure',
  'sp_p6obind_o', '.s r(obj) int16 r(obj)',
  'sp_p6obind_i', '.s r(obj) int16 r(int64)',
  'sp_p6obind_u', '.s r(obj) int16 r(uint64)',
  'sp_p6obind_n', '.s r(obj) int16 r(num64)',
  'sp_p6obind_s', '.s r(obj) int16 r(str)',
  'sp_p6oget_i32', '.s w(int64) r(obj) int16 :pure',
  'sp_p6oget_u32', '.s w(uint64) r(obj) int16 :pure',
  'sp_p6obind_i32', '.s r(obj) int16 r(int64) :pure',
  'sp_p6obind_u32', '.s r(obj) int16 r(uint64) :pure',
  'sp_getvt_o', '.s w(obj) r(obj) int16 sslot',
  'sp_getvc_o', '.s w(obj) r(obj) int16 sslot',
  'sp_fastbox_i', '.s w(obj) int16 sslot int16 r(int64) :pure',
  'sp_fastbox_u', '.s w(obj) int16 sslot int16 r(uint64) :pure',
  'sp_fastbox_bi', '.s w(obj) int16 sslot int16 r(int64) :pure',
  'sp_fastbox_i_ic', '.s w(obj) int16 sslot int16 r(int64) int16 :pure',
  'sp_fastbox_u_ic', '.s w(obj) int16 sslot int16 r(uint64) int16 :pure',
  'sp_fastbox_bi_ic', '.s w(obj) int16 sslot int16 r(int64) int16 :pure',
  'sp_deref_get_i64', '.s w(int64) r(obj) int16 :pure',
  'sp_deref_get_n', '.s w(num64) r(obj) int16 :pure',
  'sp_deref_bind_i64', '.s r(obj) r(int64) int16',
  'sp_deref_bind_n', '.s r(obj) r(num64) int16',
  'sp_getlexvia_o', '.s w(obj) int16 int16 r(obj) :pure',
  'sp_getlexvia_ins', '.s w(`1) int16 int16 r(obj) :pure',
  'sp_bindlexvia_os', '.s int16 int16 r(obj) r(obj) :pure',
  'sp_bindlexvia_in', '.s int16 int16 r(obj) r(obj) :pure',
  'sp_getstringfrom', '.s w(str) sslot int32 :pure',
  'sp_getwvalfrom', '.s w(obj) sslot int64 :pure',
  'sp_jit_enter', '.s w(obj)',
  'sp_istrue_n', '.s w(int64) r(num64) :pure',
  'sp_boolify_iter', '.s w(int64) r(obj) :pure',
  'sp_boolify_iter_arr', '.s w(int64) r(obj) :pure',
  'sp_boolify_iter_hash', '.s w(int64) r(obj) :pure',
  'sp_cas_o', '.s w(obj) r(obj) r(obj) r(obj) :invokish :maycausedeopt',
  'sp_atomicload_o', '.s w(obj) r(obj)',
  'sp_atomicstore_o', '.s r(obj) r(obj) :invokish :maycausedeopt',
  'sp_add_I', '.s w(obj) int16 sslot r(obj) r(obj) int16 int16 :pure',
  'sp_sub_I', '.s w(obj) int16 sslot r(obj) r(obj) int16 int16 :pure',
  'sp_mul_I', '.s w(obj) int16 sslot r(obj) r(obj) int16 int16 :pure',
  'sp_bool_I', '.s w(int64) r(obj) int16 :pure',
  'sp_runbytecode_v', '.s r(obj) uint64 int16 :maycausedeopt :invokish',
  'sp_runbytecode_i', '.s w(int64) r(obj) uint64 int16 :maycausedeopt :invokish',
  'sp_runbytecode_u', '.s w(uint64) r(obj) uint64 int16 :maycausedeopt :invokish',
  'sp_runbytecode_n', '.s w(num64) r(obj) uint64 int16 :maycausedeopt :invokish',
  'sp_runbytecode_s', '.s w(str) r(obj) uint64 int16 :maycausedeopt :invokish',
  'sp_runbytecode_o', '.s w(obj) r(obj) uint64 int16 :maycausedeopt :invokish',
  'sp_runcfunc_v', '.s r(obj) uint64',
  'sp_runcfunc_i', '.s w(int64) r(obj) uint64',
  'sp_runcfunc_u', '.s w(uint64) r(obj) uint64',
  'sp_runcfunc_n', '.s w(num64) r(obj) uint64',
  'sp_runcfunc_s', '.s w(str) r(obj) uint64',
  'sp_runcfunc_o', '.s w(obj) r(obj) uint64',
  'sp_runnativecall_v', '.s r(obj) uint64 :maycausedeopt :invokish',
  'sp_runnativecall_i', '.s w(int64) r(obj) uint64 :maycausedeopt :invokish',
  'sp_runnativecall_u', '.s w(uint64) r(obj) uint64 :maycausedeopt :invokish',
  'sp_runnativecall_n', '.s w(num64) r(obj) uint64 :maycausedeopt :invokish',
  'sp_runnativecall_s', '.s w(str) r(obj) uint64 :maycausedeopt :invokish',
  'sp_runnativecall_o', '.s w(obj) r(obj) uint64 :maycausedeopt :invokish',
  'sp_resumption', '.s w(obj) uint16 uint16',
  'prof_enter', '.s',
  'prof_enterspesh', '.s',
  'prof_enterinline', '.s sslot',
  'prof_enternative', '.s r(obj)',
  'prof_exit', '.s',
  'prof_allocated', '.s r(obj)',
  'prof_replaced', '.s sslot',
  'ctw_check', '.s r(obj) int16',
  'coverage_log', '.s str int32 int32 int64',
  'breakpoint', '.s int32 int32 :throwish :invokish',
;
#- PLEASE DON'T CHANGE ANYTHING ABOVE THIS LINE
#- end of generated part of Ops  -----------------------------------------------

my constant %op2index = @ops.kv.reverse;

# The first item on each line, can be a prefix
my constant %annotation2name =
  "d", "dispatch",
  "j", "jump",
  "p", "parameter",
  "r", "return",
  "s", "spesh", 
;

my constant @adverbs = %ops.values.map( {
    (quietly .head.starts-with("." | ":") ?? .skip !! $_)
      .map({ .substr(1) if .starts-with(":") }).Slip
} ).unique.sort;

# Since most Op objects are singletons, use this as a compile time store.
# If the number of bytes can not be determined at compile time, it will
# be set to zero.
my @reified-ops;

#-------------------------------------------------------------------------------
# Front end class for the MoarVM operator information
class MoarVM::Op {
    has str  $.name;
    has uint $.index;
    has uint $.bytes;
    has str  $.annotation;
    has Bool $.is-sequence is built(:bind);
    has List $.operands    is built(:bind);
    has Map  $.adverbs     is built(:bind);

    proto method new(|) {*}
    multi method new(Int:D $index) {
        @reified-ops[$index]
          // "No op known at index $index: must be between 0 and @reified-ops.end()".Failure
    }
    multi method new(Str:D $name) {
        my $index := %op2index{$name} // fail "No op known with name '$name'";
        @reified-ops[$index]
    }

    # The number of bytes an opcode takes *can* be dependent on the
    # callsite, so can only be reliably calculated if the frame's
    # callsites are also supplied.  As we don't have that here and
    # now, reset to 0 bytes to indicate it's non-conclusive.
    sub calculate-bytes(@operands, &variable-handler = -> $ { return 0 }) {
        my uint $bytes = 2;
        for @operands {
            $bytes = $bytes + (.starts-with('r(')
              || .starts-with('w(')
              || .ends-with('8')
              || .ends-with('16')
              || $_ eq 'coderef'
              || $_ eq 'sslot'
              ?? 2
              !! .starts-with('rl(')
                || .starts-with('wl(')
                || .ends-with('32')
                || $_ eq 'ins'
                || $_ eq 'str'
                ?? 4
                !! .ends-with('64')
                  ?? 8
                  !! $_ eq 'callsite'
                    ?? variable-handler($bytes)
                    !! die "don't know how to handle '$_'"
            )
        }

        $bytes
    }

    method instantiate($index, $name) {
        my @info = %ops{$name}.words;

        my $annotation  := "";
        my $is-sequence := False;
        if @info.head -> $head {
            if ($head.starts-with(".") || $head.starts-with(":"))
              && %annotation2name{$head.substr(1)} -> $_ {
                $annotation  := $_;
                $is-sequence := $head.starts-with(":");
                @info.shift;
            }

            # DEPRECATED ops may have these annotations
            elsif $head.starts-with('+')
              || $head.starts-with('-')
              || $head.starts-with('*') {
                @info.shift;  # ignore
            }
        }

        my @operands is List = @info.grep(!*.starts-with(":")).Slip;
        my %adverbs  is Map  = @info.map: {
            .substr(1) => True if .starts-with(":")
        }

        # The number of bytes an opcode takes *can* be dependent on the
        # callsite, so can only be reliably calculated if the frame's
        # callsites are also supplied.  As we don't have that here and
        # now, reset to 0 bytes to indicate it's non-conclusive.
        my uint $bytes = calculate-bytes(@operands);

        self.bless(
          :$name, :$index, :$bytes, :$annotation, :$is-sequence,
          :@operands, :%adverbs
        )
    }

    method bytes(MoarVM::Op:D: $source?, $offset?) {
        $!bytes || calculate-bytes $!operands, -> $bytes {
            2 + $source.callsites[
              $source.opcodes.read-uint16($offset + $bytes, LittleEndian)
            ].bytes
        }
    }

    multi method gist(MoarVM::Op:D: :$verbose) {
        my str @parts = $!index.fmt('%4x'), $!name.fmt('%-16s');

        @parts.push($!operands.join(' '))
          if $!operands.elems;
        @parts.push($!is-sequence ?? "[:$!annotation]" !! "[.$!annotation]")
          if $!annotation;
        @parts.push: $!bytes ?? "($!bytes bytes)" !! "(variable length)"
          if $verbose;

        @parts.join(' ')
    }
    multi method gist(MoarVM::Op:D: Buf:D $bytecode) {
        die "Improperly formatted bytecode"
          if $bytecode.read-uint16(0, LittleEndian) != $!index;

        ""
    }

    method all-adverbs() { @adverbs     }
    method all-ops()     { @reified-ops }
}

# Make sure we have singletons for all ops
BEGIN {
    for @ops.kv -> $index, $name {
        @reified-ops[$index] := MoarVM::Op.instantiate($index, $name);
    }
}

# vim: expandtab shiftwidth=4
