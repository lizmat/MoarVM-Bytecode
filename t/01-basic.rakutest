use Test;
use MoarVM::Bytecode;

plan 13;

my str $setting = "c";
my $M := MoarVM::Bytecode.new($setting);
is $M.version,   7,     "Is it the correct version";
is $M.hll-name, "Raku", "Is it the correct HLL";

my @frames := $M.frames.reify-all;
is @frames.elems, $M.frames.elems, "did we get all frames";

my @files = $M.files;
ok @files.elems, "did we find any bytecode files";

subtest "Check all known bytecode files" => {
    plan @files + 1;

    my %hll-names;

    for @files {
        ok (my $m := MoarVM::Bytecode.new($_)), $_;
        %hll-names{$m.hll-name}++;
    }

    is %hll-names.elems, 2, 'Did we see 2 HLL names';
}

is $M.strings.elems, $M.string-heap-entries,
  "Found $M.strings.elems() strings in $setting setting";
is $M.sc-dependencies.elems, $M.sc-dependencies-entries,
  "Found $M.sc-dependencies.elems() sc dependencies in $setting setting";
is $M.extension-ops.elems, $M.extension-ops-entries,
  "Found $M.extension-ops.elems() extension ops in $setting setting";
is $M.frames.elems, $M.frames-data-entries,
  "Found $M.frames.elems() frames in $setting setting";
is $M.callsites.elems, $M.callsites-data-entries,
  "Found $M.callsites.elems() callsites in $setting setting";

for MoarVM::Op.new(0), MoarVM::Op.new("no_op") -> $op {
    subtest "Check if op info can be obtained" => {
        plan 7;

        is        $op.name,        "no_op",           "is name of op ok";
        is        $op.annotation,  "",                "is annotation of op ok";
        is-deeply $op.is-sequence, False,             "not a sequence";
        is        $op.index,       0,                 "is index of op ok";
        is        $op.bytes,       2,                 "is bytes of op ok";
        is-deeply $op.registers,   (),                "no registers involved?";
        is-deeply $op.adverbs,     { :confprog }.Map, "a single attribute?";
    }
}

is MoarVM::Op.all-ops.elems, 973, "Right number of ops?";

# vim: expandtab shiftwidth=4
